"""add df keys to permission table

Revision ID: ecb8d6ff1485
Revises: e6113378af0a
Create Date: 2025-06-02 19:50:12.466626

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ecb8d6ff1485'
down_revision: Union[str, None] = 'e6113378af0a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('file_permissions')]
    
    if 'otpk_id' not in columns:
        op.add_column('file_permissions', sa.Column('otpk_id', sa.Integer(), nullable=True))
    if 'ephemeral_key' not in columns:
        op.add_column('file_permissions', sa.Column('ephemeral_key', sa.BLOB(), nullable=False))
    
    # Get existing foreign keys
    foreign_keys = inspector.get_foreign_keys('file_permissions')
    otpk_fk_exists = any(fk['referred_table'] == 'one_time_pre_keys' and 'otpk_id' in fk['constrained_columns'] 
                        for fk in foreign_keys)
    
    if not otpk_fk_exists:
        op.create_foreign_key(None, 'file_permissions', 'one_time_pre_keys', ['otpk_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'file_permissions', type_='foreignkey')
    op.drop_column('file_permissions', 'ephemeral_key')
    op.drop_column('file_permissions', 'otpk_id')
    # ### end Alembic commands ###
