"""add_spk_updated_at_column_to_fix_prod_3

Revision ID: a4b64017ff93
Revises: 30b6fc8fc25e
Create Date: 2025-06-05 12:20:28.305221

"""
from typing import Sequence, Union
from datetime import datetime
from sqlalchemy.sql import text

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a4b64017ff93'
down_revision: Union[str, None] = '30b6fc8fc25e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('users')]
    
    if 'spk_updated_at' not in columns:
        # First add the column as nullable
        op.add_column('users', sa.Column('spk_updated_at', sa.DateTime(timezone=True), nullable=True))
        
        # Update existing rows with current timestamp
        current_time = datetime.utcnow()
        conn.execute(text("UPDATE users SET spk_updated_at = :current_time"), {"current_time": current_time})
        
        # Then make it non-nullable
        op.alter_column('users', 'spk_updated_at',
                       existing_type=sa.DateTime(timezone=True),
                       nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('users')]
    
    if 'spk_updated_at' in columns:
        op.drop_column('users', 'spk_updated_at')
    # ### end Alembic commands ###
